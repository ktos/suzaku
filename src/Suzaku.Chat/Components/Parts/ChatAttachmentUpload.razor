@* shows the attachment panel with a upload input *@

@using Suzaku.Chat.Services
@inject FileHandler FileUploadHandler

<div @ref="fileDropContainer">
	<InputFile OnChange="@OnChange" multiple class="@HoverClass" @ondragenter="OnDragEnter" @ondragleave="OnDragLeave" @ondragover="OnDragEnter" />
</div>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
	<div class="alert alert-danger">
		<p>@ErrorMessage</p>
	</div>
}

@foreach (var imageSource in imageSources)
{
	<img src="@imageSource" />
}
@code {
	private List<string> imageSources = new();
	private const int maxAllowedFiles = 2;
	private string? ErrorMessage;
	ElementReference fileDropContainer;

	/// <summary>
	/// The handler to be run after the file has been uploaded
	/// </summary>
	[Parameter] public EventCallback<string> OnSendFile { get; set; }

	private async Task OnChange(InputFileChangeEventArgs e)
	{
		imageSources.Clear();
		ErrorMessage = string.Empty;
		if (e.FileCount > maxAllowedFiles)
		{
			ErrorMessage = $"Only {maxAllowedFiles} files can be uploaded.";
			HoverClass = "form-control bg-danger-subtle";
			return;
		}

		foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
		{
			try
			{
				using var stream = file.OpenReadStream(maxAllowedSize: 204800000);
				var newName = await FileUploadHandler.HandleUploadAsync(stream, file.Name);

				await OnSendFile.InvokeAsync(newName);
			}
			catch (IOException)
			{
				ErrorMessage = $"Something went wrong with upload, check file size?";
			}

			HoverClass = "form-control";
		}
	}

	private string HoverClass = "form-control";
	private void OnDragEnter(DragEventArgs e) => HoverClass = "form-control bg-success-subtle";
	private void OnDragLeave(DragEventArgs e) => HoverClass = "form-control";
}