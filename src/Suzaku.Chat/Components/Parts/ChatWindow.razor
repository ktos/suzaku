@using Microsoft.JSInterop
@using Suzaku.Chat.Models
@using Suzaku.Chat.Services
@inject ChatHistory ChatHistory
@inject MqttService MqttService
@inject ChatCommandService ChatCommandService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<div class="container py-5 vh-100">
	<div class="row d-flex justify-content-center">
		<div class="col-md-8 col-lg-6 col-xl-4">
			<div class="card" style="height: 90vh">
				<div class="card-header"
					 style="border-top: 4px solid #ffa900;">
					<div class="d-flex justify-content-between align-items-center">
						<div class="dropdown">
							<button class="btn btn-outline-secondary dropdown-toggle btn-lg" type="button" data-bs-toggle="dropdown" aria-expanded="false">
								@displayedChatName
							</button>
							<ul class="dropdown-menu">
								<li><a class="dropdown-item" href="/">Default</a></li>
								@foreach (var item in ChatHistory.GetChannels())
								{
									<li><a class="dropdown-item" href="/chat/@item.Name">@item.DisplayName</a></li>
								}
								<li><span class="dropdown-item"><form @onsubmit="NewChatEntered"><InputText class="form-control" @bind-Value="newChat"></InputText></form></span></li>
							</ul>
						</div>
						<div class="d-flex flex-row align-items-center">
							<button class="btn btn-primary m-1" data-bs-target="#collapse1" data-bs-toggle="collapse"><i class="ti ti-paperclip"></i></button>
						</div>
					</div>
					<div class="collapse" id="collapse1">
						<ChatAttachmentUpload OnSendFile="OnSendFile"></ChatAttachmentUpload>
					</div>
				</div>
				<div class="card-body overflow-auto" @ref="listRef">
					<ChatElementsView Elements="displayedElements"></ChatElementsView>
				</div>
				<div class="card-footer text-muted d-flex justify-content-start align-items-center p-3">
					<ChatInput OnSend="OnSend"></ChatInput>
				</div>
			</div>

		</div>
	</div>

</div>

@code {
	private ElementReference listRef;
	private string? newChat;
	private List<Element> displayedElements = null!;

	private string displayedChatName = "Suzaku";

	private void ScrollToEnd()
	{
		JS.InvokeVoidAsync("scrollToEnd", new object[] { listRef });
	}

	private void NewChatEntered()
	{
		NavigationManager.NavigateTo($"/chat/{newChat}");
	}

	protected override void OnInitialized()
	{
		ChatHistory.Notify += OnNotify;
		displayedChatName = ChatHistory.CurrentChannel.DisplayName;
		displayedElements = ChatHistory.GetCurrentChannelElements();
	}

	protected override void OnAfterRender(bool firstRender)
	{
		ScrollToEnd();
		base.OnAfterRender(firstRender);
	}

	public async Task OnNotify()
	{
		await InvokeAsync(() =>
		{
			displayedElements = ChatHistory.GetCurrentChannelElements();
			StateHasChanged();
		});

		ScrollToEnd();
	}

	public async Task OnSend(string text)
	{
		if (ChatCommandService.IsCommand(text))
		{
			var result = ChatCommandService.ParseCommand(text);
			if (result != null)
			{
				ChatHistory.AddElement(result, ChatHistory.CurrentChannel.Name);
			}
		}
		else
		{
			await MqttService.PublishUserMessage(text, ChatHistory.CurrentChannel.CurrentConversationId, ChatHistory.CurrentChannel.Name);
		}
	}

	public async Task OnSendFile(string fileName)
	{
		await MqttService.PublishUserAttachment(fileName, ChatHistory.CurrentChannel.CurrentConversationId, ChatHistory.CurrentChannel.Name);
	}

	public void Dispose() => ChatHistory.Notify -= OnNotify;
}
