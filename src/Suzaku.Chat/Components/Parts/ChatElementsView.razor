@* the main chat window content, shows the chat's elements in a proper way *@

@using Microsoft.Extensions.Options
@using Suzaku.Chat.Services
@using Suzaku.Chat.Models
@using Suzaku.Chat.Components.ChatElements
@inject IOptions<UserConfiguration> UserConfig

@for (int i = 0; i < Elements.Count; i++)
{
	var item = Elements[i];
	var prev = i > 0 ? Elements[i - 1] : null;

	if (item is Busy busy)
	{
		<ChatBusyMarker Sender="@busy.Sender"></ChatBusyMarker>
	}
	else if (item is NewConversationMarker marker)
	{
		<hr title="New conversation started" />
	}
	else if (item is Error error)
	{
		<div class="alert alert-danger">
			@error.Content
		</div>
	}
	else if (item is Info info)
	{
		<div class="alert alert-info">
			@info.Content
		</div>
	}
	else if (item is Attachment attachment)
	{
		var grouped = false;
		if (prev != null && prev is Message prevMsg && prevMsg.Sender == attachment.Sender && (attachment.Timestamp - prevMsg.Timestamp) < TimeSpan.FromMinutes(5))
		{
			grouped = true;
		}

		<ChatAttachment IsGrouped="grouped" IsMine="@FormatIsMine(attachment)" Element="@attachment"></ChatAttachment>
	}
	else if (item is CannedResponses canned)
	{
		if (!canned.IsInteracted)
		{
			var grouped = false;
			if (prev != null && prev is Message prevMsg && prevMsg.Sender == canned.Sender && (canned.Timestamp - prevMsg.Timestamp) < TimeSpan.FromMinutes(5))
			{
				grouped = true;
			}

			<ChatCannedResponses IsGrouped="grouped" Element="@canned"></ChatCannedResponses>
		}
	}
	else if (item is Message message)
	{
		var grouped = false;
		if (prev != null && prev is Message prevMsg && prevMsg.Sender == message.Sender && (message.Timestamp - prevMsg.Timestamp) < TimeSpan.FromMinutes(5))
		{
			grouped = true;
		}

		<ChatMessage IsGrouped="grouped" IsMine="@FormatIsMine(message)" Element="@message"></ChatMessage>
	}
}

@code {
	/// <summary>
	/// List of elements to be shown
	/// </summary>
	[Parameter] public required IList<Element> Elements { get; set; }

	private bool FormatIsMine(Message message)
	{
		return message.Sender == "User";
	}
}
