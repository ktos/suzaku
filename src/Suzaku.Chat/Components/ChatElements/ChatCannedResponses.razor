@using Suzaku.Chat.Helpers
@using Suzaku.Chat.Models
@using Suzaku.Chat.Services
@inject ICommunicationService CommService

@if (!Element.IsInteracted)
{
	@if (!IsGrouped)
	{
		<div class="d-flex justify-content-between">
			<ParticipantName Name="@Element.Sender"></ParticipantName>
			<MessageTime Timestamp="Element.Timestamp"></MessageTime>
		</div>
	}
	<div class="d-flex flex-row justify-content-start" style="@(IsGrouped ? "margin-top: -0.80rem; margin-left: 55px" : "")">
		@if (!IsGrouped)
		{
			<Avatar IsMine="false" Name="@Element.Sender"></Avatar>
		}
		<div>
			<div class="border border-primary ms-3 p-2 pt-0 pb-0 mb-3 rounded-3 chat-message" style="background-color: #f5f6f7">
				@foreach (var item in Element.Responses)
				{
					<button class="btn btn-outline-primary btn-sm m-1" @onclick="async () => await ResponseClickedAsync(item)">@item</button>
				}
			</div>
		</div>
	</div>
}

@code {
	/// <summary>
	/// Should it be displayed in a normal or a grouped (short) form
	/// </summary>
	[Parameter] public bool IsGrouped { get; set; }

	/// <summary>
	/// The canned responses to present in a chat window
	/// </summary>
	[Parameter] public required CannedResponses Element { get; set; }

	private async Task ResponseClickedAsync(string item)
	{
		Element.IsInteracted = true;
		await CommService.PublishUserMessageOnCurrentChannelAndConversationAsync(item);
	}
}
