@using Suzaku.Chat.Helpers
@using Suzaku.Chat.Models
@using Suzaku.Chat.Services

@if (!IsMine)
{
	if (!IsGrouped)
	{
		<div class="d-flex justify-content-between">
			<ParticipantName Name="@Element.Sender" IsMine="false"></ParticipantName>
			<MessageTime Timestamp="Element.Timestamp"></MessageTime>
		</div>
	}
	<div class="d-flex flex-row justify-content-start" style="@(IsGrouped ? "margin-top: -0.80rem; margin-left: 55px" : "")">
		@if (!IsGrouped)
		{
			<Avatar IsMine="false" Name="@Element.Sender"></Avatar>
		}
		<div>
			<div class="ms-3 p-2 pt-0 pb-0 mb-3 rounded-3 chat-message" style="background-color: #f5f6f7">
				<p>
					<a class="small" href="/uploads/@Element.Content">
						@Element.Content
						@GeneratePreview()
					</a>
				</p>
				<p class="fs-2 text-end">
					<i class="ti ti-paperclip" onclick="copyToClipboard('@Element.Content')"></i>
				</p>
			</div>
		</div>
	</div>
}
else
{
	@if (!IsGrouped)
	{
		<div class="d-flex justify-content-between">
			<MessageTime Timestamp="Element.Timestamp"></MessageTime>
			<ParticipantName IsMine="true"></ParticipantName>
		</div>
	}
	<div class="d-flex flex-row justify-content-end pt-1" style="@(IsGrouped ? "margin-top: -1.2rem; margin-right: 55px" : "")">
		<div>
			<div class="p-2 pt-0 pb-0 me-3 text-white rounded-3 bg-warning">
				<p>
					<a class="small" href="/uploads/@Element.Content">
						@Element.Content
						@GeneratePreview()
					</a>
				</p>
				<p class="fs-2 text-end">
					<i class="ti ti-paperclip" onclick="copyToClipboard('@Element.Content')"></i>
				</p>
			</div>
		</div>
		@if (!IsGrouped)
		{
			<Avatar IsMine="true"></Avatar>
		}
	</div>
}

@code {
	/// <summary>
	/// The element (attachment) to be presented
	/// </summary>
	[Parameter] public required Attachment Element { get; set; }

	/// <summary>
	/// If the element should be presented as coming from the user or a bot
	/// </summary>
	[Parameter] public bool IsMine { get; set; }

	/// <summary>
	/// If the element should be presented in a short (grouped with previous) or a normal way
	/// </summary>
	[Parameter] public bool IsGrouped { get; set; }

	private MarkupString GeneratePreview()
	{
		if (Element.Content is null)
			return new MarkupString(string.Empty);

		// returns image preview
		if (Element.Content.ToLower().EndsWith(".jpg") || Element.Content.ToLower().EndsWith(".gif") || Element.Content.ToLower().EndsWith(".png") || Element.Content.ToLower().EndsWith(".jpg") || Element.Content.ToLower().EndsWith(".svg"))
		{
			return new MarkupString("<br /><img src='/uploads/" + Element.Content + "' alt='' style='max-width: 150px'>");
		}

		// returns audio preview
		if (Element.Content.ToLower().EndsWith(".m4a") || Element.Content.ToLower().EndsWith(".mp3"))
		{
			return new MarkupString("<br /><audio src='/uploads/" + Element.Content + "' alt='' controls>");
		}

		return new MarkupString(string.Empty);
	}
}
