@using Suzaku.Chat.Models
@using Suzaku.Chat.Services
@inject ICommunicationService CommService

@if (!Element.IsInteracted)
{
	@if (!IsGrouped)
	{
		<div class="d-flex justify-content-between">
			<p class="small mb-1 fw-bold"><a class="text-black text-decoration-none" href="/chat/@Element.Sender.ToLower()">@Element.Sender.FirstCharToUpper()</a></p>
			@if (DateTime.Now.Date == Element.Timestamp.ToLocalTime().Date)
			{
				<p class="small mb-1 text-muted">@Element.Timestamp.ToLocalTime().ToString("t")</p>
			}
			else
			{
				<p class="small mb-1 text-muted">@Element.Timestamp.ToLocalTime().ToString("dd MMM") @Element.Timestamp.ToLocalTime().ToString("t")</p>
			}
		</div>
	}
	<div class="d-flex flex-row justify-content-start" style="@(IsGrouped ? "margin-top: -0.80rem; margin-left: 55px" : "")">
		@if (!IsGrouped)
		{
			<img src="@($"/avatars/{Element.Sender.ToLower()}.png")" alt="" style="width: 55px; height: 100%;" class="rounded-circle">
		}
		<div>
			<div class="border border-primary ms-3 p-2 pt-0 pb-0 mb-3 rounded-3 chat-message" style="background-color: #f5f6f7">
				@foreach (var item in Element.Responses)
				{
					<button class="btn btn-outline-primary btn-sm m-1" @onclick="async () => await ResponseClickedAsync(item)">@item</button>
				}
			</div>
		</div>
	</div>
}

@code {
	[Parameter] public bool IsGrouped { get; set; }
	[Parameter] public CannedResponses Element { get; set; }

	private async Task ResponseClickedAsync(string item)
	{
		Element.IsInteracted = true;
		await CommService.PublishUserMessageAsync(item);
	}
}
