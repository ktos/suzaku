using Microsoft.Extensions.Options;
using MQTTnet;
using MQTTnet.Client;
using Suzaku.Chat.Models;
using System.Reflection;
using System.Text.Json;

namespace Suzaku.Chat.Services
{
    public class MqttService
    {
        private readonly MqttFactory mqttFactory;
        private readonly IMqttClient mqttClient;
        private readonly MqttClientOptions mqttClientOptions;
        private readonly ChatHistory _repository;
        private readonly ILogger<MqttService> _logger;

        public MqttService(
            ChatHistory repo,
            ILogger<MqttService> logger,
            IOptions<MqttConfiguration> options
        )
        {
            _repository = repo;
            _logger = logger;

            mqttFactory = new MqttFactory();
            mqttClient = mqttFactory.CreateMqttClient();
            mqttClientOptions = new MqttClientOptionsBuilder()
                .WithTcpServer(options.Value.Host, options.Value.Port)
                .Build();

            mqttClient.ApplicationMessageReceivedAsync += e =>
            {
                var content = e.ApplicationMessage.ConvertPayloadToString();
                _logger.LogDebug(
                    "Received message for topic {0}: {1}",
                    e.ApplicationMessage.Topic,
                    content
                );

                try
                {
                    var msg = JsonSerializer.Deserialize<ChatJsonMessage>(content);

                    if (e.ApplicationMessage.Topic.EndsWith("response"))
                    {
                        // message generated by the agent as the response for a chat
                        // or as a response for a command from another agent

                        if (msg != null)
                        {
                            var chat = new ChatMessage
                            {
                                Sender = Formatter.FromTopic(e.ApplicationMessage.Topic),
                                Id = msg.Id,
                                Response = msg.Response,
                                Content = msg.Content,
                                BusyMarker = false,
                                Timestamp = DateTime.UtcNow
                            };

                            _repository.AddMessage(chat);
                        }
                    }
                    else if (e.ApplicationMessage.Topic.EndsWith("system"))
                    {
                        // message generated by the system
                        // for example marking the agent is generating response

                        if (msg != null && msg.BusyMarker)
                        {
                            var chat = new ChatMessage
                            {
                                Sender = Formatter.FromTopic(e.ApplicationMessage.Topic),
                                Id = msg.Id,
                                Response = msg.Response,
                                Content = msg.Content,
                                BusyMarker = msg.BusyMarker,
                                Timestamp = DateTime.UtcNow
                            };

                            _repository.AddMessage(chat);
                        }
                    }
                    else
                    {
                        if (msg != null)
                        {
                            var chat = new ChatMessage
                            {
                                Sender = User.Human,
                                Id = msg.Id,
                                Response = null,
                                Content = msg.Content,
                                BusyMarker = false,
                                Timestamp = DateTime.UtcNow
                            };

                            _repository.AddMessage(chat);
                        }
                    }
                }
                catch (JsonException ex)
                {
                    _logger.LogError("Got a malformed message?");
                }

                return Task.CompletedTask;
            };
        }

        public async Task InitializeAsync()
        {
            await mqttClient.ConnectAsync(mqttClientOptions, CancellationToken.None);

            var mqttSubscribeOptions = mqttFactory
                .CreateSubscribeOptionsBuilder()
                .WithTopicFilter(f => f.WithTopic("suzaku/+/chat_system"))
                .WithTopicFilter(f => f.WithTopic("suzaku/+/chat_response"))
                .WithTopicFilter(f => f.WithTopic("suzaku/chat"))
                .Build();

            await mqttClient.SubscribeAsync(mqttSubscribeOptions, CancellationToken.None);
        }

        public async Task PublishUserMessage(User recipient, string content)
        {
            var chatMessage = new ChatJsonMessage
            {
                Content = content,
                BusyMarker = false,
                Id = Guid.NewGuid()
            };

            var mqttMessage = new MqttApplicationMessageBuilder()
                .WithTopic(Formatter.ToTopic(recipient))
                .WithPayload(JsonSerializer.Serialize(chatMessage))
                .Build();

            await mqttClient.PublishAsync(mqttMessage);
        }
    }
}
