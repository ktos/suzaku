using MQTTnet.Client;
using MQTTnet;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Suzaku.Bot.Models;
using Suza.Services;
using Microsoft.Extensions.Options;
using Suzaku.Chat;

namespace Suzaku.Bot.Services
{
    public class MqttService
    {
        private readonly MqttFactory mqttFactory;
        private readonly IMqttClient mqttClient;
        private readonly MqttClientOptions mqttClientOptions;
        private readonly ILogger<MqttService> _logger;
        private readonly IMessageResponder _responder;

        public MqttService(
            ILogger<MqttService> logger,
            IMessageResponder responder,
            IOptions<MqttConfiguration> options
        )
        {
            _logger = logger;
            _responder = responder;

            mqttFactory = new MqttFactory();
            mqttClient = mqttFactory.CreateMqttClient();
            mqttClientOptions = new MqttClientOptionsBuilder()
                .WithTcpServer(options.Value.Host, options.Value.Port)
                .Build();

            mqttClient.ApplicationMessageReceivedAsync += async e =>
            {
                var content = e.ApplicationMessage.ConvertPayloadToString();
                _logger.LogDebug(
                    "Received message for topic {0}: {1}",
                    e.ApplicationMessage.Topic,
                    content
                );

                try
                {
                    var msg = JsonSerializer.Deserialize<ChatJsonMessage>(content);

                    if (e.ApplicationMessage.Topic.EndsWith("system"))
                    {
                        // message generated by the system
                        // for example marking the agent is generating response

                        var sysmsg = JsonSerializer.Deserialize<SystemJsonMessage>(content);
                        if (sysmsg != null && !sysmsg.BusyMarker && sysmsg.Sender != null)
                        {
                            var result = await _responder.SummarizeBotMessageAsync(
                                sysmsg.Sender,
                                sysmsg.Content
                            );
                            if (result != null)
                                await PublishResponseMessage(msg, result);
                        }
                    }
                    else
                    {
                        if (msg != null)
                        {
                            // message from human, respond to them!
                            await PublishBusyMessage(msg, true);
                            var result = await _responder.RespondAsync(msg.Content);
                            if (result != null)
                                await PublishResponseMessage(msg, result);
                            else
                                await PublishBusyMessage(msg, false);
                        }
                    }
                }
                catch (JsonException ex)
                {
                    _logger.LogError("Got a malformed message?");
                }

                return;
            };
        }

        public async Task InitializeAsync()
        {
            await mqttClient.ConnectAsync(mqttClientOptions, CancellationToken.None);

            var mqttSubscribeOptions = mqttFactory
                .CreateSubscribeOptionsBuilder()
                .WithTopicFilter(f => f.WithTopic("suzaku/+/chat_system"))
                .WithTopicFilter(f => f.WithTopic("suzaku/chat"))
                .Build();

            await mqttClient.SubscribeAsync(mqttSubscribeOptions, CancellationToken.None);
        }

        public async Task PublishResponseMessage(ChatJsonMessage? original, string content)
        {
            var chatMessage = new ChatJsonMessage
            {
                Content = content,
                BusyMarker = false,
                Id = Guid.NewGuid(),
                Response = original == null ? null : original.Id
            };

            var mqttMessage = new MqttApplicationMessageBuilder()
                .WithTopic("suzaku/suza/chat_response")
                .WithPayload(JsonSerializer.Serialize(chatMessage))
                .Build();

            await mqttClient.PublishAsync(mqttMessage);
        }

        public async Task PublishBusyMessage(ChatJsonMessage? original, bool isBusy = true)
        {
            var chatMessage = new ChatJsonMessage
            {
                BusyMarker = isBusy,
                Id = Guid.NewGuid(),
                Response = original == null ? null : original.Id
            };

            var mqttMessage = new MqttApplicationMessageBuilder()
                .WithTopic("suzaku/suza/chat_system")
                .WithPayload(JsonSerializer.Serialize(chatMessage))
                .Build();

            await mqttClient.PublishAsync(mqttMessage);
        }

        public async Task DisconnectAsync()
        {
            await mqttClient.DisconnectAsync();
        }
    }
}
