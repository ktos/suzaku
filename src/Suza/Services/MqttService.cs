using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using MQTTnet;
using MQTTnet.Client;
using Suzaku.Bot.Models;
using Suzaku.Shared;
using System.Text.Json;

namespace Suzaku.Bot.Services
{
    public class MqttService
    {
        private readonly MqttFactory mqttFactory;
        private readonly IMqttClient mqttClient;
        private readonly MqttClientOptions mqttClientOptions;
        private readonly ILogger<MqttService> _logger;
        private readonly IMessageResponder _responder;
        private readonly string _botName;
        private readonly string _botPublicTopic;
        private readonly string _botResponseTopic;
        private readonly string _botSystemTopic;
        private readonly string _botPrivateTopic;

        public MqttService(
            ILogger<MqttService> logger,
            IMessageResponder responder,
            IOptions<MqttConfiguration> mqttOptions,
            IOptions<BotConfiguration> botOptions
        )
        {
            _logger = logger;
            _responder = responder;
            _botName = botOptions.Value.Name;
            _botPublicTopic = "suzaku/chat";
            _botResponseTopic = $"suzaku/{_botName.ToLower()}/chat_response";
            _botSystemTopic = $"suzaku/{_botName.ToLower()}/chat_system";
            _botPrivateTopic = $"suzaku/{_botName}/chat";

            mqttFactory = new MqttFactory();
            mqttClient = mqttFactory.CreateMqttClient();
            mqttClientOptions = new MqttClientOptionsBuilder()
                .WithTcpServer(mqttOptions.Value.Host, mqttOptions.Value.Port)
                .Build();

            mqttClient.ApplicationMessageReceivedAsync += async e =>
            {
                var content = e.ApplicationMessage.ConvertPayloadToString();
                _logger.LogDebug(
                    "Received message for topic {0}: {1}",
                    e.ApplicationMessage.Topic,
                    content
                );

                try
                {
                    if (e.ApplicationMessage.Topic == _botSystemTopic)
                    {
                        // message generated by the system
                        // for example marking the agent is generating response

                        //var sysmsg = JsonSerializer.Deserialize<SystemJsonMessage>(content);
                        //if (sysmsg != null && !sysmsg.BusyMarker && sysmsg.Sender != null)
                        //{
                        //    var result = await _responder.SummarizeBotMessageAsync(
                        //        sysmsg.Sender,
                        //        sysmsg.Content
                        //    );
                        //    if (result != null)
                        //        await PublishResponseMessage(msg, result);
                        //}
                    }
                    else if (e.ApplicationMessage.Topic == _botPublicTopic)
                    {
                        var msg = JsonSerializer.Deserialize<ChatJsonMessage>(content);

                        if (msg != null)
                        {
                            // message from human, respond to them!
                            await PublishBusyMessage(true);
                            var result = await _responder.RespondAsync(msg.Content);
                            if (result != null)
                                await PublishResponseMessage(result, msg.ConversationId);

                            await PublishBusyMessage(false);
                        }
                    }
                }
                catch (JsonException)
                {
                    _logger.LogError("Got a malformed message?");
                }

                return;
            };
        }

        public async Task InitializeAsync()
        {
            await mqttClient.ConnectAsync(mqttClientOptions, CancellationToken.None);

            var mqttSubscribeOptions = mqttFactory
                .CreateSubscribeOptionsBuilder()
                .WithTopicFilter(f => f.WithTopic(_botSystemTopic))
                .WithTopicFilter(f => f.WithTopic(_botPublicTopic))
                .WithTopicFilter(f => f.WithTopic(_botPrivateTopic))
                .Build();

            await mqttClient.SubscribeAsync(mqttSubscribeOptions, CancellationToken.None);
        }

        public async Task PublishResponseMessage(string content, Guid conversationId)
        {
            var chatMessage = new ChatJsonMessage
            {
                Sender = _botName,
                Content = content,
                ConversationId = conversationId
            };

            var mqttMessage = new MqttApplicationMessageBuilder()
                .WithTopic(_botResponseTopic)
                .WithPayload(JsonSerializer.Serialize(chatMessage))
                .Build();

            await mqttClient.PublishAsync(mqttMessage);
        }

        public async Task PublishMessage(string content)
        {
            await PublishResponseMessage(content, Guid.NewGuid());
        }

        public async Task PublishBusyMessage(bool isBusy = true)
        {
            var chatMessage = new SystemJsonMessage
            {
                Sender = _botName,
                Content = isBusy ? SystemJsonMessage.BUSY : SystemJsonMessage.NOT_BUSY
            };

            var mqttMessage = new MqttApplicationMessageBuilder()
                .WithTopic(_botSystemTopic)
                .WithPayload(JsonSerializer.Serialize(chatMessage))
                .Build();

            await mqttClient.PublishAsync(mqttMessage);
        }

        public async Task DisconnectAsync()
        {
            await mqttClient.DisconnectAsync();
        }
    }
}
